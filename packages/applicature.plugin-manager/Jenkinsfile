properties properties: [
    [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', numToKeepStr: '10']],
]

def buildSucceeded = true

def slack = {
    def buildStatus = buildSucceeded ? "succeeded" : "failed"
    def buildColor = buildSucceeded ? "good" : "bad"
    def commit = sh(returnStdout: true, script: 'git rev-parse HEAD')
    def author = sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${commit}").trim()
    def lastCommitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
    def branch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
    
    slackSend(
        message: "",
        channel: '@oleksiy.tkachenko',
        attachments: """[ 
            {
                title: "${env.JOB_NAME}, build #${env.BUILD_NUMBER}",
                author_name: "${author}",
                text: "Build ${buildStatus}",
                color: "${buildColor}",
                title_link: "${env.BUILD_URL}",
                fields: [
                    {
                        title: "Branch",
                        value: "${lastCommitMessage}",
                        short: true
                    },
                    {
                        title: "Last commit",
                        value: "${lastCommitMessage}",
                        short: true
                    },
                ]
            } 
        ]"""
    )
}

node {
    def buildNumber = env.BUILD_NUMBER
    def workspace = env.WORKSPACE
    def buildUrl = env.BUILD_URL

    // PRINT ENVIRONMENT TO JOB
    echo "workspace directory is $workspace"
    echo "build URL is $buildUrl"
    echo "build Number is $buildNumber"

    nodejs(configId: '661cf31b-bdac-4946-bf6d-251593378980', nodeJSInstallationName: 'Node 8.x') {
        sh 'node --version'
        sh 'npm --version'

        try {
            stage('Checkout') {
            }

            stage('Build') {
              sh "npm install"
              sh "npm run build"
            }

            stage('Test') {
              sh "npm run test:ci"
              junit 'junit.xml'
            }

            stage('Publish NPM snapshot') {
              sh "npm publish"
            }

            buildSucceeded = true
            slack()

        } catch (e) {
            buildSucceeded = false
            slack()
            throw e
        }
    }
}